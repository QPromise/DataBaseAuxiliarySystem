package cn.edu.ouc.controller;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import cn.edu.ouc.mapper.province.FirstIndexMetadataMapper;
import cn.edu.ouc.pojo.dto.IndexWeight;
import cn.edu.ouc.pojo.vo.CheckoutVO;
import cn.edu.ouc.pojo.vo.CompareVO;
import cn.edu.ouc.pojo.vo.FoldLineDiagram;
import cn.edu.ouc.pojo.vo.ReviseDataVO;
import cn.edu.ouc.pojo.vo.Select2;
import cn.edu.ouc.service.DataComputeService;
import cn.edu.ouc.service.DataService;
import cn.edu.ouc.service.IndexWeightService;
import cn.edu.ouc.test.Evaluation_Mothod;
import cn.edu.ouc.test.MySql;

@Controller
@RequestMapping("/DataController/")
public class DataController {

	@Autowired
	private DataService dataService;
	@Autowired
	private DataComputeService dataComputeService;
	@Autowired
	private FirstIndexMetadataMapper firstIndexMetadataMapper;

	@Autowired
	private IndexWeightService indexWeightService;

	@RequestMapping("uploadFile")
	@ResponseBody
	public Map<String, Object> uploadFile(MultipartFile file, HttpSession session) throws Exception {
		Map<String, Object> map = new HashMap<>();
		System.out.println("进入文件上传");

		String path = "E:\\DataBaseAuxiliarySystem\\file";
		String fileName = file.getOriginalFilename();
		System.out.println("文件名称：" + fileName);
		String[] strings = fileName.split("\\.");
		if (!"xlsx".equals(strings[1])) {
			map.put("fileerror", "fileerror");
			return map;
		}
		// 添加文件查重功能
		File dir = new File(path, fileName);
		System.out.println(dir.getPath());
		if (!dir.exists()) {
			dir.mkdirs();
		}
		// MultipartFile自带的解析方法
		file.transferTo(dir);

		// 数据查重
		List<String> result = dataService.checkingData(dir);
		if (result.size() == 0) {
			// 查询该省份的数据是否存在

			int count = firstIndexMetadataMapper.listCountByDistrict(strings[0]);
			// 如果省份不存在，那么直接插入
			if (count == 0) {
				List<CheckoutVO> importData = dataService.importData(dir);
				map.put("msg", importData);
				System.out.println("省份不存在,直接插入");
				// 数据计算
				dataComputeService.thirdIndexDataCompute();
				dataComputeService.secondIndexDataCompute();
				dataComputeService.firstIndexDataCompute();
				dataComputeService.synthesizeDataCompute();
				return map;
			} else {
				// 如果省份存在，那么只插入数据
				List<CheckoutVO> importDataAgain = dataService.importDataAgain(dir);
				System.out.println("省份存在,只插入数据");
				map.put("msg", importDataAgain);

				// 先清空所有的计算数据
				dataComputeService.deletAll();
				// 再重新计算数据
				dataComputeService.thirdIndexDataCompute();
				dataComputeService.secondIndexDataCompute();
				dataComputeService.firstIndexDataCompute();
				dataComputeService.synthesizeDataCompute();
				return map;
			}
		} else {
			// 反馈界面响应
			System.out.println("数据重复---：" + result);
			map.put("error", result);
			return map;
		}
	}

	/**
	 * 单独的指标查询
	 * 
	 * @param designation
	 * @param id
	 * @return
	 * @throws Exception
	 */
	@RequestMapping("listIndexDataByDesignation")
	public @ResponseBody FoldLineDiagram listIndexDataByDesignation(String designation, Integer id) throws Exception {
		System.out.println("查询指标级别：" + id + " 查询指标名称：" + designation);

		FoldLineDiagram foldLineDiagram = dataService.listFourthIndexDataByDesignation(designation, id);

		return foldLineDiagram;
	}

	/**
	 * 综合指标查询
	 * 
	 * @param designation
	 * @param id
	 * @return
	 * @throws Exception
	 */
	@RequestMapping("comprehensiveIndexQuery")
	public @ResponseBody FoldLineDiagram comprehensiveIndexQuery() throws Exception {

		FoldLineDiagram foldLineDiagram = dataService.comprehensiveIndexQuery();

		return foldLineDiagram;
	}

	@RequestMapping("listFirstIndexMetadata")
	public @ResponseBody List<Select2> listFirstIndexMetadata() throws Exception {

		return dataService.listFirstIndexMetadata();
	}

	@RequestMapping("listSecondIndexMetadata")
	public @ResponseBody List<Select2> listSecondIndexMetadata(String designation) throws Exception {

		return dataService.listSecondIndexMetadata(designation);
	}

	@RequestMapping("listThirdIndexMetadata")
	public @ResponseBody List<Select2> listThirdIndexMetadata(String designation) throws Exception {

		return dataService.listThirdIndexMetadata(designation);
	}

	@RequestMapping("listFourthIndexMetadata")
	public @ResponseBody List<Select2> listFourthIndexMetadata(String designation) throws Exception {

		return dataService.listFourthIndexMetadata(designation);
	}

	@RequestMapping("listWeightValueByIndex")
	public @ResponseBody List<IndexWeight> listWeightValueByIndex(Integer id) throws Exception {
		List<IndexWeight> listWeightValueByIndex = indexWeightService.listWeightValueByIndex(id);
		return listWeightValueByIndex;
	}

	@RequestMapping("updateIndexWeightById")
	public @ResponseBody String updateIndexWeightById(Integer index, Integer id, Double weightValue) throws Exception {
		System.out.println("修改的权重级别：" + index + " -- 权重id：" + id + " -- 权重值：" + weightValue);
		String updateIndexWeightById = indexWeightService.updateIndexWeightById(index, id, weightValue);
		// 先清空所有的计算数据
		dataComputeService.deletAll();
		// 再重新计算数据
		dataComputeService.thirdIndexDataCompute();
		dataComputeService.secondIndexDataCompute();
		dataComputeService.firstIndexDataCompute();
		dataComputeService.synthesizeDataCompute();

		return updateIndexWeightById;
	}

	@RequestMapping("compare")
	@ResponseBody
	public List<CompareVO> compare(String year, String provinceA, String provinceB, String provinceC) {
		double[][] outArray = new double[4][151];// 固定选择3个省份得数据，最后一列为权重
		double[][] Array = new double[151][4];// 转置之后得数组，输入评价过程用
		MySql mysql = new MySql();// 数据库链接，库名和用户名密码需要更改！！！！
		outArray[0] = mysql.selectValue(provinceA, year);// 省份，年份，得到数据
		outArray[1] = mysql.selectValue(provinceB, year);
		outArray[2] = mysql.selectValue(provinceC, year);
		outArray[3] = mysql.selectWeight();// 得到权重数据
		Array = mysql.tfunction(outArray);// 矩阵转置

		Evaluation_Mothod method = new Evaluation_Mothod();// 评价过程

		double[][] outputs = null;
		outputs = method.MapSort(Array);// 转置之后得数组输入，输出评价结果
		List<Map<String, List<Double>>> result = new ArrayList<Map<String, List<Double>>>();
		List<CompareVO> vos = new ArrayList<CompareVO>();
		for (int i = 0; i < outputs.length; i++) {
			String name = "";
			Double data1 = null;
			Double data2 = null;
			Double data3 = null;
			Map<String, List<Double>> valueMap = new HashMap<String, List<Double>>();
			List<Double> valList = new ArrayList<Double>();

			for (int j = 0; j < outputs[0].length; j++) {
				System.out.print(outputs[i][j] + "	");
				if (j == 0) {
					if (outputs[i][j] == 1.0) {
						name = "指标法";
					} else if (outputs[i][j] == 2.0) {
						name = "熵值法";
					} else if (outputs[i][j] == 3.0) {
						name = "灰色关联法";
					} else if (outputs[i][j] == 4.0) {
						name = "全排列多边形法";
					} else if (outputs[i][j] == 5.0) {
						name = "TOPSIS法";
					} else {
						name = "秩和比法";
					}
				} else if (j == 1) {
					data1 = outputs[i][j];
				} else if (j == 2) {
					data2 = outputs[i][j];
				} else {
					data3 = outputs[i][j];
				}
			}
			CompareVO compareVO = new CompareVO(name, data1, data2, data3);
			vos.add(compareVO);
		}
		double[] sortSum = Evaluation_Mothod.sortSum(outputs);
		CompareVO sumVo = new CompareVO("加总", sortSum[0], sortSum[1], sortSum[2]);
		vos.add(sumVo);
		// double[] sort = Evaluation_Mothod.Sort(sortSum);
		// CompareVO paixuVo = new CompareVO("排序", sort[0], sort[1], sort[2]);
		// vos.add(paixuVo);
		return vos;
	}
	
	@RequestMapping("getFourthIndexDataAndReviseData")
	public @ResponseBody List<ReviseDataVO> getFourthIndexDataAndReviseData(Integer id, String designation) throws Exception {
		
		if(id != null){
			if (id == 4) {
				return dataService.getFourthIndexDataAndReviseDataByFourthIndex(designation);
			} else if(id == 3) {
				return dataService.getFourthIndexDataAndReviseDataByThirdIndex(designation);
			} else if(id == 2) {
				return dataService.getFourthIndexDataAndReviseDataBySecondIndex(designation);
			} else if(id == 1) {
				return dataService.getFourthIndexDataAndReviseDataByFirstIndex(designation);
			}
		}
		
		//默认查询四级指标
		return dataService.getFourthIndexDataAndReviseDataByFourthIndex(designation);
	} 
	
	@RequestMapping("updateFourthIndexDataAlter")
	public @ResponseBody String updateFourthIndexDataAlter(@RequestBody List<ReviseDataVO> reviseDataVOs) throws Exception{
		if(reviseDataVOs != null){
			Boolean flag = dataService.updateFourthIndexDataAlter(reviseDataVOs);
			if(flag){
				return "修改成功";
			}else{
				return "修改失败";
			}
		}
		return "";
	};

	@RequestMapping("test")
	public void test() {

	}
}

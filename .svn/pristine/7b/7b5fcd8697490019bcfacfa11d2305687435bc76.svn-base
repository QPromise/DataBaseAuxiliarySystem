package cn.edu.ouc.service.impl;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

import org.apache.ibatis.session.SqlSession;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import cn.edu.ouc.mapper.FirstIndexMetadataMapper;
import cn.edu.ouc.mapper.FourthIndexDataMapper;
import cn.edu.ouc.mapper.FourthIndexMetadataMapper;
import cn.edu.ouc.mapper.SecondIndexMetadataMapper;
import cn.edu.ouc.mapper.ThirdIndexMetadataMapper;
import cn.edu.ouc.pojo.dto.FirstIndexMetadata;
import cn.edu.ouc.pojo.dto.FourthIndexData;
import cn.edu.ouc.pojo.dto.FourthIndexMetadata;
import cn.edu.ouc.pojo.dto.SecondIndexMetadata;
import cn.edu.ouc.pojo.dto.ThirdIndexMetadata;
import cn.edu.ouc.pojo.vo.FoldLineDiagram;
import cn.edu.ouc.pojo.vo.Select2;
import cn.edu.ouc.service.DataService;
import cn.edu.ouc.util.ArithUtil;
import cn.edu.ouc.util.MybatisUtil;

@Service
public class DataServiceImpl implements DataService {
	
	@Autowired
	private FirstIndexMetadataMapper firstIndexMetadataMapper;
	
	// 存储二级指标
	@Autowired
	private SecondIndexMetadataMapper secondIndexMetadataMapper;
	
	//三级指标
	@Autowired
	private ThirdIndexMetadataMapper thirdIndexMetadataMapper;
	
	@Autowired
	private FourthIndexMetadataMapper fourthIndexMetadataMapper;
	
	@Autowired
	private FourthIndexDataMapper fourthIndexDataMapper;
	

	@Override
	public void importData(File file) throws Exception {
		// 1.创建要读入的文件
		InputStream inputStream = new FileInputStream(file);
		// 2.得到Excel工作簿对象
		XSSFWorkbook wb = new XSSFWorkbook(inputStream);
		// 3.得到Excel工作表对象
		XSSFSheet sheet = wb.getSheetAt(0);
		// 4.得到Excel工作表的行数、列数
		int rowNumber = sheet.getLastRowNum();
		int columNumber = sheet.getRow(0).getPhysicalNumberOfCells();

		// 5.创建临时变量
		// 名称
		String designation = "";
		// 重要程度
		String importance = "";
		// 临时一级指标名称
		String firstDesignation = "";
		// 临时二级指标名称
		String secondDesignation = "";
		// 临时三级指标名称
		String thirdDesignation = "";

		// 6.遍历所有的行列
		for (int i = 1; i < rowNumber + 1; i++) {
			// 处理第0列
			String currentDesignation = sheet.getRow(i).getCell(0).getStringCellValue();
			if (currentDesignation != "") {
				// 获取一级指标名称
				designation = currentDesignation.trim();
				// 设置临时变量供二级指标使用
				firstDesignation = designation;
				// 存储第一级指标
				FirstIndexMetadata firstIndexMetadata = new FirstIndexMetadata(currentDesignation);
				
				firstIndexMetadataMapper.insertFirstIndexMetadata(firstIndexMetadata);
			}

			// 处理第一列第二列：二级指标
			currentDesignation = sheet.getRow(i).getCell(1).getStringCellValue();
			// 二级指标不为空时再处理
			if (currentDesignation != "") {
				// 获取二级指标名称
				designation = currentDesignation.trim();
				// 获取二级指标重要度
				importance = sheet.getRow(i).getCell(2).getStringCellValue().trim();
				// 设置临时变量供三级指标使用
				secondDesignation = designation;
				// 存储第二级指标
				// 获取该二级指标对应的一级指标的id
				Integer firstIndexId = firstIndexMetadataMapper
						.getFirstIndexMetadataIdByDesignation(firstDesignation);

				secondIndexMetadataMapper.insertSecondIndexMetadata(
						new SecondIndexMetadata(firstIndexId, currentDesignation, importance));
			}

			// 遍历第3、4列：处理三级指标
			currentDesignation = sheet.getRow(i).getCell(3).getStringCellValue();
			if (currentDesignation != "") {
				// 获取三级指标名称
				designation = currentDesignation.trim();
				// 获取三级指标重要程度
				importance = sheet.getRow(i).getCell(4).getStringCellValue().trim();
				// 设置临时变量供四级指标使用
				thirdDesignation = designation;

				// 存储三级指标
				Integer secondIndex = secondIndexMetadataMapper
						.getSecondIndexMetadataIdByDesignation(secondDesignation);
				// 存储三级指标
				thirdIndexMetadataMapper.insertThirdIndexMetadata(
						new ThirdIndexMetadata(secondIndex, currentDesignation, importance));
			}

			// 遍历5、6、7列：处理四级指标数据
			currentDesignation = sheet.getRow(i).getCell(5).getStringCellValue();
			if (currentDesignation != "") {
				// 获取四级指标名称
				designation = currentDesignation.trim();
				// 获取四级指标重要度
				importance = sheet.getRow(i).getCell(7).getStringCellValue().trim();
				// 获取单位
				String unit = sheet.getRow(i).getCell(6).getStringCellValue().trim();

				// 存储四级指标
				// 获取四级指标对应的三级指标的id
				Integer thirdIndex = thirdIndexMetadataMapper
						.getThirdIndexMetadataIdByDesignation(thirdDesignation);

				// 存储四级指标
				fourthIndexMetadataMapper.insertFourthIndexMetadata(
						new FourthIndexMetadata(thirdIndex, currentDesignation, importance));

				// 处理四级指标的数据
				for (int j = 8; j < columNumber - 1; j++) {
					// 获取年份
					int year = (int) sheet.getRow(0).getCell(j).getNumericCellValue();
					// 获取年份对应的值
					if (sheet.getRow(i).getCell(j) != null) {
						sheet.getRow(i).getCell(j).setCellType(Cell.CELL_TYPE_NUMERIC);
					}
					double data = sheet.getRow(i).getCell(j).getNumericCellValue();

					// 存库
					// 获取四级指标对应的id
					Integer fourthIndex = fourthIndexMetadataMapper
							.getFourthIndexMetadataIdByDesignation(currentDesignation);
					// 存库
					fourthIndexDataMapper
							.insertFourthIndexData(new FourthIndexData(fourthIndex, String.valueOf(year), data));
				}
			}

		}

		// // 7.关闭流
		inputStream.close();
	}


	@Override
	public FoldLineDiagram listFourthIndexDataByDesignation(String designation) throws Exception {
		List<FourthIndexData> listFourthIndexDataByDesignation = fourthIndexDataMapper.listFourthIndexDataByDesignation(designation);
		System.out.println(listFourthIndexDataByDesignation.toString());
		FoldLineDiagram foldLineDiagram = new FoldLineDiagram();
		String[] transverseValues = new String[listFourthIndexDataByDesignation.size()];
		Double[] values = new Double[listFourthIndexDataByDesignation.size()];
		
		//倍数
		Double multiple = 100/listFourthIndexDataByDesignation.get(0).getValue();
		
		for (int i = 0; i < listFourthIndexDataByDesignation.size(); i++) {
			transverseValues[i] = listFourthIndexDataByDesignation.get(i).getYear();
			values[i] = ArithUtil.round(listFourthIndexDataByDesignation.get(i).getValue() * multiple, 2);
		}
		
		foldLineDiagram.setTitle(designation);
		foldLineDiagram.setTransverseValues(transverseValues);
		foldLineDiagram.setValues(values);
		
		return foldLineDiagram;
	}


	@Override
	public List<Select2> listFirstIndexMetadata() throws Exception {
		List<String> designations = firstIndexMetadataMapper.listFirstIndexDesignation();
		List<Select2> select2Designations = new ArrayList<Select2>();
		
		select2Designations.add(new Select2(0, "一级指标"));
		
		for (int i = 1; i <= designations.size(); i++) {
			Select2 select2 = new Select2(i, designations.get(i-1));
			select2Designations.add(select2);
		}
		
		System.out.println(select2Designations.toString());
		
		return select2Designations;
	}
	
	@Override
	public List<Select2> listSecondIndexMetadata(String designation) throws Exception {
		List<String> designations = secondIndexMetadataMapper.listSecondIndexDesignation(designation);
		List<Select2> select2Designations = new ArrayList<Select2>();
		
		select2Designations.add(new Select2(0, "二级指标"));
		
		for (int i = 1; i <= designations.size(); i++) {
			Select2 select2 = new Select2(i, designations.get(i-1));
			select2Designations.add(select2);
		}
		
		System.out.println(select2Designations.toString());
		
		return select2Designations;
	}
	
	@Override
	public List<Select2> listThirdIndexMetadata(String designation) throws Exception {
		List<String> designations = thirdIndexMetadataMapper.listThirdIndexMetadata(designation);
		List<Select2> select2Designations = new ArrayList<Select2>();
		
		select2Designations.add(new Select2(0, "三级指标"));
		
		for (int i = 1; i <= designations.size(); i++) {
			Select2 select2 = new Select2(i, designations.get(i-1));
			select2Designations.add(select2);
		}
		
		System.out.println(select2Designations.toString());
		
		return select2Designations;
	}
	
	@Override
	public List<Select2> listFourthIndexMetadata(String designation) throws Exception {
		List<String> designations = fourthIndexMetadataMapper.listFourthIndexMetadata(designation);
		List<Select2> select2Designations = new ArrayList<Select2>();
		
		select2Designations.add(new Select2(0, "四级指标"));
		
		for (int i = 1; i <= designations.size(); i++) {
			Select2 select2 = new Select2(i, designations.get(i-1));
			select2Designations.add(select2);
		}
		
		System.out.println(select2Designations.toString());
		
		return select2Designations;
	}

}

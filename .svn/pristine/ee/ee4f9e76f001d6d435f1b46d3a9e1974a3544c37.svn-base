package cn.edu.ouc.controller;

import java.io.File;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import cn.edu.ouc.mapper.city.CityFirstIndexMetadataMapper;
import cn.edu.ouc.pojo.dto.IndexWeight;
import cn.edu.ouc.pojo.vo.CheckoutVO;
import cn.edu.ouc.pojo.vo.FoldLineDiagram;
import cn.edu.ouc.pojo.vo.Select2;
import cn.edu.ouc.service.CityDataComputeService;
import cn.edu.ouc.service.CityDataService;
import cn.edu.ouc.service.CityIndexWeightService;

@Controller
@RequestMapping("/CityDataController/")
public class CityDataController {

	@Autowired
	private CityDataService dataService;
	@Autowired
	private CityDataComputeService dataComputeService;
	@Autowired
	private CityFirstIndexMetadataMapper firstIndexMetadataMapper;
	@Autowired
	private CityIndexWeightService indexWeightService;

	@RequestMapping("uploadFile")
	@ResponseBody
	public Map<String, Object> uploadFile(MultipartFile file, HttpSession session) throws Exception {
		Map<String, Object> map = new HashMap<>();
		System.out.println("进入文件上传");

		String path = "E:\\DataBaseAuxiliarySystem\\file";
		String fileName = file.getOriginalFilename();
		System.out.println("文件名称：" + fileName);
		String[] strings = fileName.split("\\.");
		if (!"xlsx".equals(strings[1])) {
			map.put("fileerror", "fileerror");
			return map;
		}
		// 添加文件查重功能
		File dir = new File(path, fileName);
		System.out.println(dir.getPath());
		if (!dir.exists()) {
			dir.mkdirs();
		}
		// MultipartFile自带的解析方法
		file.transferTo(dir);

		// 数据查重
		List<String> result = dataService.checkingData(dir);
		if (result.size() == 0) {
			// 查询该省份的数据是否存在
//			String[] strings = fileName.split("\\.");
			int count = firstIndexMetadataMapper.listCountByDistrict(strings[0]);
			// 如果省份不存在，那么直接插入
			if (count == 0) {
				List<CheckoutVO> importData = dataService.importData(dir);
				map.put("msg", importData);
				System.out.println("省份不存在,直接插入");
				// 数据计算
				dataComputeService.thirdIndexDataCompute();
				dataComputeService.secondIndexDataCompute();
				dataComputeService.firstIndexDataCompute();
				dataComputeService.synthesizeDataCompute();
				return map;
			} else {
				// 如果省份存在，那么只插入数据
				List<CheckoutVO> importDataAgain = dataService.importDataAgain(dir);
				System.out.println("省份存在,只插入数据");
				map.put("msg", importDataAgain);

				// 先清空所有的计算数据
				dataComputeService.deletAll();
				// 再重新计算数据
				dataComputeService.thirdIndexDataCompute();
				dataComputeService.secondIndexDataCompute();
				dataComputeService.firstIndexDataCompute();
				dataComputeService.synthesizeDataCompute();
				return map;
			}
		} else {
			// 反馈界面响应
			System.out.println("数据重复---：" + result);
			map.put("error", result);
			return map;
		}
	}

	@RequestMapping("listIndexDataByDesignation")
	public @ResponseBody FoldLineDiagram listIndexDataByDesignation(String designation, Integer id) throws Exception {
		System.out.println("查询指标级别：" + id + " 查询指标名称：" + designation);

		FoldLineDiagram foldLineDiagram = dataService.listFourthIndexDataByDesignation(designation, id);

		return foldLineDiagram;
	}
	
	/**
	 * 综合指标查询
	 * @param designation
	 * @param id
	 * @return
	 * @throws Exception
	 */
	@RequestMapping("comprehensiveIndexQuery")
	public @ResponseBody FoldLineDiagram comprehensiveIndexQuery() throws Exception {

		FoldLineDiagram foldLineDiagram = dataService.comprehensiveIndexQuery();

		return foldLineDiagram;
	}

	@RequestMapping("listFirstIndexMetadata")
	public @ResponseBody List<Select2> listFirstIndexMetadata() throws Exception {

		return dataService.listFirstIndexMetadata();
	}

	@RequestMapping("listSecondIndexMetadata")
	public @ResponseBody List<Select2> listSecondIndexMetadata(String designation) throws Exception {

		return dataService.listSecondIndexMetadata(designation);
	}

	@RequestMapping("listThirdIndexMetadata")
	public @ResponseBody List<Select2> listThirdIndexMetadata(String designation) throws Exception {

		return dataService.listThirdIndexMetadata(designation);
	}

	@RequestMapping("listFourthIndexMetadata")
	public @ResponseBody List<Select2> listFourthIndexMetadata(String designation) throws Exception {

		return dataService.listFourthIndexMetadata(designation);
	}

	@RequestMapping("listWeightValueByIndex")
	public @ResponseBody List<IndexWeight> listWeightValueByIndex(Integer id) throws Exception {
		List<IndexWeight> listWeightValueByIndex = indexWeightService.listWeightValueByIndex(id);
		return listWeightValueByIndex;
	}

	@RequestMapping("updateIndexWeightById")
	public @ResponseBody String updateIndexWeightById(Integer index, Integer id, Double weightValue) throws Exception {
		System.out.println("修改的权重级别：" + index + " -- 权重id：" + id + " -- 权重值：" + weightValue);
		String updateIndexWeightById = indexWeightService.updateIndexWeightById(index, id, weightValue);
		return updateIndexWeightById;
	}

	@RequestMapping("test")
	public void test() {
		try {
			dataComputeService.synthesizeDataCompute();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}
